These are Matt Langston's developer notes to himself. This file will
go away in the future for I want to keep it around during the
development of the JavaScriptCoreCPP library.

* JSClass.hpp

  /*!
    @method
    
    @abstract Return the JSClass with the given name.

    @param The name of the JSClass to return.
    
    @result The JSClass with the given name.
    
    @throws std::invalid_argument if a JSClass with the given name
    does not exist.
  */
  static JSClass GetClassWithName(const JSString& class_name);

  /*!
    @method
    
    @abstract Return the number of JSClasses created.

    @result The number of JSClasses created.
  */
  static std::size_t GetClassCount();

  /*!
    @method
    
    @abstract Return the names of the JSClasses created.

    @result The names of the JSClasses created.
  */
  static std::vector<std::string> GetClassNames();

* JSClass.cpp

JSClass JSClass::GetClassWithName(const JSString& class_name) {
	// TODO
}

std::size_t JSClass::GetClassCount() {
	// TODO
}

std::vector<std::string> JSClass::GetClassNames() {
	// TODO
}

* JSExportCallbacks
** InitializeCallback
/*! 
  @typedef InitializeCallback

  @abstract The callback to invoke when a JavaScript object is first
  created. Unlike the other object callbacks, the initialize callback
  is called on the least derived object (the parent object) first, and
  the most derived object last, analogous to the way C++ constructors
  work in a class hierarchy.
  
  For example, given this class definition:
  
  class Foo {
    void Initialize();
  };

  You would define the callback like this:
  
  InitializeCallback callback(&Foo::Initialize);
  
  @param 1 A non-const reference to the C++ object being initialized.
*/
template<typename T>
using InitializeCallback = std::function<void(T&)>;
	
** FinalizeCallback
/*! 
  @typedef FinalizeCallback

  @abstract The callback to invoke when a JavaScript object is
  finalized (prepared for garbage collection). This callback is
  invoked immediately before your C++ class destructor. An object may
  be finalized on any thread.
  
  @discussion The finalize callback is called on the most derived
  object first, and the least derived object (the parent object) last,
  analogous to that way C++ destructors work in a class hierarchy.
	  
  You must not call any function that may cause a garbage collection
  or an allocation of a garbage collected object from within a
  FinalizeCallback. This basically means don't create any object whose
  class name begins with JS (e.g. JSString, JSValue, JSObject, etc.)
  and don't call any methods on such objects that you may already have
  a reference to.
	  
  For example, given this class definition:

  class Foo {
    void Finalize(void* native_object_ptr);
  };

  You would define the callback like this:

  FinalizeCallback callback(&Foo::Finalize);

  @param 1 A non-const reference to the C++ object being finalized.

  @param 2 A pointer to the native object being finalized.
*/
template<typename T>
using FinalizeCallback = std::function<void(T&, void*)>;

* JSClassBuilder.hpp
** InitializeCallback
	/*!
	  @method

	  @abstract Return the callback to invoke when a JavaScript object
	  is first created.
	  
	  @result The callback to invoke when a JavaScript object is first
	  created.
	*/
	InitializeCallback<T> Initialize() const {
		return initialize_callback__;
	}

	/*!
	  @method

	  @abstract Set the callback to invoke when a JavaScript object is
	  first created. Unlike the other object callbacks, the initialize
	  callback is called on the least derived object (the parent object)
	  first, and the most derived object last, analogous to the way C++
	  constructors work in a class hierarchy.

	  @discussion For example, given this class definition:

	  class Foo {
	    void Initialize();
	  };

	  You would call the builer like this:

	  JSClassBuilder<Foo> builder("Foo");
	  builder.Initialize(&Foo::Initialize);
  
	  @result A reference to the builder for chaining.
	*/
	JSClassBuilder<T>& Initialize(const InitializeCallback<T>& initialize_callback) {
		JAVASCRIPTCORECPP_DETAIL_JSCLASSBUILDER_LOCK_GUARD;
		initialize_callback__ = initialize_callback;
		return *this;
	}

** FinalizeCallback
	/*!
	  @method

	  @abstract Return the callback to invoke when a JavaScript object
	  is finalized (prepared for garbage collection).
  	  
	  @result The callback to invoke when a JavaScript object is
	  finalized (prepared for garbage collection).
	*/
	FinalizeCallback<T> Finalize() const {
		return finalize_callback__;
	}

	/*!
	  @method

	  @abstract Set the callback to invoke when a JavaScript object is
	  finalized (prepared for garbage collection). This callback is
	  invoked immediately before your C++ class destructor. An object
	  may be finalized on any thread.

	  @discussion The finalize callback is called on the most derived
	  object first, and the least derived object (the parent object)
	  last, analogous to that way C++ destructors work in a class
	  hierarchy.
	  
	  You must not call any function that may cause a garbage collection
	  or an allocation of a garbage collected object from within a
	  FinalizeCallback. This basically means don't create any object
	  whose class name begins with JS (e.g. JSString, JSValue, JSObject,
	  etc.)  and don't call any methods on such objects that you may
	  already have a reference to.
	  
	  For example, given this class definition:

	  class Foo {
	    void Finalize();
	  };

	  You would call the builer like this:

	  JSClassBuilder<Foo> builder("Foo");
	  builder.Finalize(&Foo::Finalize);

	  @result A reference to the builder for chaining.
	*/
	JSClassBuilder<T>& Finalize(const FinalizeCallback<T>& finalize_callback) {
		JAVASCRIPTCORECPP_DETAIL_JSCLASSBUILDER_LOCK_GUARD;
		finalize_callback__ = finalize_callback;
		return *this;
	}

** HasPropertyCallback
	/*!
	  @method

	  @abstract Return the callback to invoke when determining whether a
	  JavaScript object has a property.
  
	  @result The callback to invoke when determining whether a
	  JavaScript object has a property.

	HasPropertyCallback<T> HasProperty() const {
		return has_property_callback_;
	}
	*/

	/*!
	  @method

	  @abstract Set the callback to invoke when determining whether a
	  JavaScript object has a property. If this callback is missing then
	  the object will delegate to the GetPropertyCallback.
  
	  @discussion The HasPropertyCallback enables optimization in cases
	  where only a property's existence needs to be known, not its
	  value, and computing its value is expensive. If the
	  HasPropertyCallback doesn't exist, then the GetPropertyCallback
	  will be used instead.

	  If this function returns false then the reqeust forwards to
	  properties added by the AddValuePropertyCallback method (if any),
	  then properties vended by the class' parent class chain, then
	  properties belonging to the JavaScript object's prototype chain.

	  For example, given this class definition:

	  class Foo {
	    bool HasProperty(const JSString& property_name) const;
	  };

	  You would call the builer like this:

	  JSClassBuilder<Foo> builder("Foo");
	  builder.HasProperty(&Foo::HasProperty);

	  @result A reference to the builder for chaining.

	JSClassBuilder<T>& HasProperty(const HasPropertyCallback<T>& has_property_callback) {
		has_property_callback_ = has_property_callback;
		return *this;
	}
	*/

** GetPropertyCallback
	/*!
	  @method

	  @abstract Return the callback to invoke when getting a property's
	  value from a JavaScript object.
  	  
	  @result The callback to invoke when getting a property's value
	  from a JavaScript object.

	GetPropertyCallback<T> GetProperty() const {
		return get_property_callback_;
	}
	*/

	/*!
	  @method

	  @abstract Set the callback to invoke when getting a property's
	  value from a JavaScript object.
	  
	  @discussion If this function returns JSUndefined, the get request
	  forwards to properties added by the AddValuePropertyCallback
	  method (if any), properties vended by the class' parent class
	  chain, then properties belonging to the JavaScript object's
	  prototype chain.

	  For example, given this class definition:

	  class Foo {
	    JSValue GetProperty(const JSString& property_name) const;
	  };

	  You would call the builer like this:

	  JSClassBuilder<Foo> builder("Foo");
	  builder.GetProperty(&Foo::GetProperty);
	  
	  @result A reference to the builder for chaining.

	JSClassBuilder<T>& GetProperty(const GetPropertyCallback<T>& get_property_callback) {
		get_property_callback_ = get_property_callback;
		return *this;
	}
	*/

** SetPropertyCallback	
	/*!
	  @method

	  @abstract Return the callback to invoke when setting a property's
	  value on a JavaScript object.
  	  
	  @result The callback to invoke when setting a property's value on
	  a JavaScript object.

	SetPropertyCallback<T> SetProperty() const {
		return set_property_callback_;
	}
	*/

	/*!
	  @method

	  @abstract Set the callback to invoke when setting a property's
	  value on a JavaScript object.

	  @discussion If this callback returns false then the request
	  forwards to properties added by the AddValuePropertyCallback
	  method (if any), then properties vended by the class' parent class
	  chain, then properties belonging to the JavaScript object's
	  prototype chain.

	  For example, given this class definition:

	  class Foo {
	    bool SetProperty(const JSString& property_name, const JSValue& value);
	  };

	  You would call the builer like this:

	  JSClassBuilder<Foo> builder("Foo");
	  builder.SetProperty(&Foo::SetProperty);
  
	  @result A reference to the builder for chaining.

	JSClassBuilder<T>& SetProperty(const SetPropertyCallback<T>& set_property_callback) {
		set_property_callback_ = set_property_callback;
		return *this;
	}
	*/

** DeletePropertyCallback
	/*!
	  @method

	  @abstract Return the callback to invoke when deleting a property
	  from a JavaScript object.
  	  
	  @result The callback to invoke when deleting a property from a
	  JavaScript object.

	DeletePropertyCallback<T> DeleteProperty() const {
		return delete_property_callback_;
	}
	*/

	/*!
	  @method

	  @abstract Set the callback to invoke when deleting a property from
	  a JavaScript object.
  	  
	  @discussion If this function returns false then the request
	  forwards to properties added by the AddValuePropertyCallback
	  method (if any), then properties vended by the class' parent class
	  chain, then properties belonging to the JavaScript object's
	  prototype chain.

	  For example, given this class definition:

	  class Foo {
	    bool DeleteProperty(const JSString& property_name);
	  };

	  You would call the builer like this:

	  JSClassBuilder<Foo> builder("Foo");
	  builder.DeleteProperty(&Foo::DeleteProperty);

	  @result A reference to the builder for chaining.

	JSClassBuilder<T>& DeleteProperty(const DeletePropertyCallback<T>& delete_property_callback) {
		delete_property_callback_ = delete_property_callback;
		return *this;
	}
	*/

** GetPropertyNamesCallback
	/*!
	  @method

	  @abstract Return the callback to invoke when collecting the names
	  of a JavaScript object's properties.
  	  
	  @result The callback to invoke when collecting the names of a
	  JavaScript object's properties

	GetPropertyNamesCallback<T> GetPropertyNames() const {
		return get_property_names_callback_;
	}
	*/

	/*!
	  @method

	  @abstract Set the callback to invoke when collecting the names of
	  a JavaScript object's properties.
	  
	  @discussion The GetPropertyNamesCallback only needs to provide the
	  property names provided by the GetPropertyCallback and/or
	  SetPropertyCallback callbacks (if any). Other property names are
	  automatically added from properties provided by the
	  AddValuePropertyCallback method (if any), then properties vended
	  by the class' parent class chain, then properties belonging to the
	  JavaScript object's prototype chain.
	  
	  For example, given this class definition:

	  class Foo {
	    void GetPropertyNames(const JSPropertyNameAccumulator& accumulator) const;
	  };

	  You would call the builer like this:

	  JSClassBuilder<Foo> builder("Foo");
	  builder.GetPropertyNames(&Foo::GetPropertyNames);
	  
	  Property name accumulators are used by JavaScript for...in loops.
	  Use JSPropertyNameAccumulator::AddName to add property names to
	  accumulator.

	  @result A reference to the builder for chaining.

	JSClassBuilder<T>& GetPropertyNames(const GetPropertyNamesCallback<T>& get_property_names_callback) {
		get_property_names_callback_ = get_property_names_callback;
		return *this;
	}
	*/

** CallAsFunctionCallback
    /*!
     @method
     
     @abstract Return the callback to invoke when a JavaScript object
     is called as a function.
     
     @result The callback to invoke when a JavaScript object is called
     as a function.
     */
    CallAsFunctionCallback<T> Function() const noexcept {
      return call_as_function_callback__;
    }
    
    /*!
     @method
     
     @abstract Set the callback to invoke when a JavaScript object is
     called as a function.
     
     @discussion If this callback does not exist, then calling your
     object as a function will throw a JavaScript exception.
     
     For example, given this class definition:
     
     class Foo {
     JSValue DoSomething(std::vector<JSValue>&& arguments, JSObject&& this_object);
     };
     
     You would call the builer like this:
     
     JSExportClassDefinitionBuilder<Foo> builder("Foo");
     builder.Function(&Foo::DoSomething);
     
     In the JavaScript expression 'myObject.myFunction()', then
     'myFunction' is the instance of Foo being called, and this_object
     would be set to 'myObject'.
     
     In the JavaScript expression 'myFunction()', then both
     'myFunction' and 'myObject' is the instance of Foo being called.
     
     @result A reference to the builder for chaining.
     */
    JSExportClassDefinitionBuilder<T>& Function(const CallAsFunctionCallback<T>& call_as_function_callback) noexcept {
      JAVASCRIPTCORECPP_DETAIL_JSEXPORTCLASSDEFINITIONBUILDER_LOCK_GUARD;
      call_as_function_callback__ = call_as_function_callback;
      return *this;
    }

** CallAsConstructorCallback
	/*!
	  @method
	  
	  @abstract Return the callback to invoke when a JavaScript object
	  is used as a constructor in a 'new' expression. If you provide
	  this callback then you must also provide the HasInstanceCallback
	  as well.
  
	  @result The callback to invoke when an object is used as a
	  constructor in a 'new' expression.
	*/
	CallAsConstructorCallback<T> Constructor() const {
		return call_as_constructor_callback__;
	}

	/*!
	  @method

	  @abstract Set the callback to invoke when a JavaScript object is
	  used as a constructor in a 'new' expression. If you provide this
	  callback then you must also provide the HasInstanceCallback as
	  well.

	  @discussion If this callback doest not exist, then using your
	  object as a constructor in a 'new' expression will throw a
	  JavaScript exception.
	  
	  For example, given this class definition:
	  
	  class Foo {
	    JSObject Constructor(std::vector<JSValue>&& arguments);
	  };
	  
	  You would call the builer like this:
	  
	  JSClassBuilder<Foo> builder("Foo");
	  builder.Constructor(&Foo::Constructor);

	  If your callback were invoked by the JavaScript expression
	  'new myConstructor()', then 'myConstructor' is the instance of Foo
	  being called.

	  @result A reference to the builder for chaining.
	*/
	JSClassBuilder<T>& Constructor(const CallAsConstructorCallback<T>& call_as_constructor_callback) {
		JAVASCRIPTCORECPP_DETAIL_JSCLASSBUILDER_LOCK_GUARD;
		call_as_constructor_callback__ = call_as_constructor_callback;
		return *this;
	}

** HasInstanceCallback	
	/*!
	  @method
	  
	  @abstract Return the callback to invoke when a JavaScript object
	  is used as the target of an 'instanceof' expression. If you
	  provide this callback then you must also provide the
	  CallAsConstructorCallback as well.

	  @result The callback to invoke when an object is used as the
	  target of an 'instanceof' expression.
	*/
	HasInstanceCallback<T> HasInstance() const {
		return has_instance_callback__;
	}

	/*!
	  @method

	  @abstract Set the callback to invoke when a JavaScript object is
	  used as the target of an 'instanceof' expression. If you provide
	  this callback then you must also provide the
	  CallAsConstructorCallback as well.

	  @discussion If this callback does not exist, then 'instanceof'
	  expressions that target your object will return false.

	  For example, given this class definition:
	  
	  class Foo {
	    bool HasInstance(JSValue&& possible_instance) const;
	  };

	  You would call the builer like this:
	  
	  JSClassBuilder<Foo> builder("Foo");
	  builder.HasInstance(&Foo::HasInstance);

	  If your callback were invoked by the JavaScript expression
	  'someValue instanceof myObject', then 'myObject' is the instanceof
	  of Foo being called and 'someValue' is the possible_instance
	  parameter.
	  
	  @result A reference to the builder for chaining.
	*/
	JSClassBuilder<T>& HasInstance(const HasInstanceCallback<T>& has_instance_callback) {
		JAVASCRIPTCORECPP_DETAIL_JSCLASSBUILDER_LOCK_GUARD;
		has_instance_callback__ = has_instance_callback;
		return *this;
	}

** ConvertToTypeCallback
    /*!
     @method
     
     @abstract Return the callback to invoke when converting a
     JavaScript object another JavaScript type.
     
     @result The callback to invoke when converting a JavaScript object
     to another JavaScript type.
     */
     ConvertToTypeCallback<T> ConvertToType() const noexcept {
       return convert_to_type_callback__;
     }
    
    /*!
     @method
     
     @abstract Set the callback to invoke when converting a JavaScript
     object to another JavaScript type. This function is only invoked
     when converting an object to a number or a string. An object
     converted to boolean is 'true.' An object converted to object is
     itself.
     
     @discussion If this function returns JSUndefined, then the
     conversion request forwards the reqeust to the JSClass' parent
     class chain, then the JavaScript object's prototype chain.
     
     For example, given this class definition:
     
     class Foo {
     JSValue ConvertToType(JSValue::Type&& type) const;
     };
     
     You would call the builer like this:
     
     JSExportClassDefinitionBuilder<Foo> builder("Foo");
     builder.ConvertToType(&Foo::ConvertToType);
     
     @result A reference to the builder for chaining.
     */
     JSExportClassDefinitionBuilder<T>& ConvertToType(const ConvertToTypeCallback<T>& convert_to_type_callback) noexcept {
       JAVASCRIPTCORECPP_DETAIL_JSEXPORTCLASSDEFINITIONBUILDER_LOCK_GUARD;
       convert_to_type_callback__ = convert_to_type_callback;
       return *this;
     }

** RemoveAllValueProperties
	/*!
	  @method

	  @abstract Remove all callbacks added by the AddValueProperty
	  method.
	  
	  @result A reference to the builder for chaining.
	JSClassBuilder<T>& RemoveAllValueProperties() {
		value_property_callback_map_.clear();
		return *this;
	}
	*/

** RemoveAllFunctionProperties
	/*!
	  @method

	  @abstract Remove all callbacks added by the AddFunctionProperty
	  method.
	  
	  @result A reference to the builder for chaining.
	JSClassBuilder<T>& RemoveAllFunctionProperties() {
		function_property_callback_map_.clear();
		return *this;
	}
	*/
* JavaScriptCoreCPP
** RAII
commit 7f637082057e94e077b10e1ef78c9cf2a133b088
Author: matt-langston <matt-langston@users.noreply.github.com>
Date:   Mon Nov 3 20:43:29 2014 -0800
** RAII2
commit 6ff6399c1bb946f223a99fb522fd1d5155a32cbc
Author: matt-langston <matt-langston@users.noreply.github.com>
Date:   Thu Nov 6 06:11:45 2014 -0800
** RAII3
commit f7e0286df981ecb4a3d31616866d1c49deff6270
Author: matt-langston <matt-langston@users.noreply.github.com>
Date:   Thu Nov 6 18:10:49 2014 -0800
** RAII4
commit d9c45c9bf19e53ee7eae1cf4847dcded182f030c
Author: matt-langston <matt-langston@users.noreply.github.com>
Date:   Sat Nov 8 22:52:39 2014 -0800
** RAII5
commit 51aec088df330c1097714903ddd225a292f3410d
Author: Matt Langston <matt_langston@mac.com>
Date:   Mon Nov 10 02:57:04 2014 +0000
** RAII6
commit c551e4bcc92602ab9b844b304d225b92a9a504d6
Author: matt-langston <matt-langston@users.noreply.github.com>
Date:   Sun Nov 9 22:05:02 2014 -0800
** RAII
After merging RAII2, RAII3, RAII4, RAII5 and RAII6 into RAII
commit c551e4bcc92602ab9b844b304d225b92a9a504d6
Author: matt-langston <matt-langston@users.noreply.github.com>
Date:   Sun Nov 9 22:05:02 2014 -0800
